<h1>Learn#pros</h1>
<h3>Why we use Ruby on Rails</h3>
<ul class="pros2">
    <li>Ruby programming language</li>
    <ul class="inner">
    <li>Object-oriented </li>
    <li>Unsurprising syntax and behaviour </li></ul>
    <li>DRY (Don't Repeat Yourself) code </li>
    <ul class="inner">
    <li>Concise and consistent</li>
    <li>Easy to maintain and update </li></ul>
    <li>Convention over Configuration</li>
    <ul class="inner">
    <li>Providing default structures</li>
    <li>Best practices of web application development</li></ul>
    <li>Example</li>
    <p><%=image_tag 'cmd_result.jpg' %></p>
    <p>Just with one single command line, rails will automatically and give default structures for a database, web service and webpages.</p>
    <p><%=image_tag 'testProject.jpg' %></p>
    <p>Rails is model, veiw, controller framework, so there are mvc default structures as well. In the project folder, you can actually see the created folders and files</p>
    </ul>



<h3>Convenient Features of Ruby on Rails</h3>
<ul class="pros">
    <li>Generators & Scaffold</li>
    <p>"rails generate scaffold Post title:string body:text" will generate a scaffold called Post with the basic MVC structure.</p>
    <p><%= image_tag 'scaffold.jpg' %></p>
    <p>Just with this single line of code, the result is a working page with a database and all shown as below.</p>
    <p><%= image_tag 'scaffold_browser.jpg' %> => <%= image_tag 'scaffold_post.jpg' %> => <%= image_tag 'scaffold_post2.jpg' %> => <%= image_tag 'scaffold_post3.jpg' %></p>
    <li>Gems/Plugins</li>
    <p>There is an endless list of Ruby Gems that can be used by developers provided by the Rails community. You can use the necessary gems for authentication, testing, modification, etc. for your Rails project. To use these gems, you can simply add the necessary gems to your project Gemfile and install. This will undoubtely accelerate the the development and maintenance time of your project.</p>
    <li>Active Record ORM (Object Relational Mapping)</li>
    <p>This is something that Rails gives you as an interface between the database and your application. It lets you structure your data models for your users, blog posts, comments, etc. in a logical fashion, so it is very straightforward to use.</p>
    <li>Integrated testing tools</li>
    <p>In order to manage your project, you need to do a lot of testing to fix or get rid of bugs in your project. and “out of the gate, Rails has a testing framework that can be used for your project.”</p>
</ul>

<p>References: http://www.leonardteo.com/2012/07/ruby-on-rails-vs-php-the-good-the-bad/</p>

